
import * as fs from 'fs'

const raw = fs.readFileSync('./g4gen/data.json', 'utf8')
const mcbLexer = fs.readFileSync('./src/mcbLexer.g4', 'utf8')
const json = JSON.parse(raw).children

let CommandsLexer = ""

// CommandsLexer += (
// `

// lexer grammar CommandsLexer;

// tokens { COMMANDS }

// Comment: '//' ~[\\r\\n]* -> channel(HIDDEN);

// WS: [\\u0020\\u0009\\u000C] -> channel(HIDDEN);
// NL: '\\n' | '\\r' '\\n'?;

// fragment Hidden: Comment | WS;

// `
// )


// CommandsLexer += Object.keys(json).map(a => [a.replace("-", "_"), a]).map(a => `${a[0].toUpperCase()}:'${a[1]} ' -> pushMode(Commands),type(COMMANDS);`).join("\n")
CommandsLexer += 'COMMANDS:('
CommandsLexer += Object.keys(json).map(a => [a.replace("-", "_"), a]).map(a => `'${a[1]}'`).join("|")
CommandsLexer += ')-> pushMode(Commands),type(COMMANDS);'
// CommandsLexer += (
// `

// mode Commands;

// COMMANDS_END: NL -> popMode;
// CommandStr: ~([\\n\\r])+;

// `
// );

let I_CommandsLexer = ""

I_CommandsLexer += (
`

I_COMMANDS: COMMANDS -> pushMode(Commands),type(COMMANDS);


`
)

// I_CommandsLexer += Object.keys(json).map(a => [a.replace("-", "_"), a]).map(a => `I_${a[0].toUpperCase()}:${a[0].toUpperCase()} -> pushMode(Commands),type(COMMANDS);`).join("\n")

const head_start = /\/\*START HEADER GENERATED BY G4GEN\*\//.exec(mcbLexer)
const head_end = /\/\*END HEADER GENERATED BY G4GEN\*\//.exec(mcbLexer)

if (head_start && head_end) {
    const open = mcbLexer.substring(0, head_start.index + head_start[0].length)
    const close = mcbLexer.substring(head_end.index, mcbLexer.length)
    const head = `${open}\ntokens { COMMANDS }${close}`
    const gen_start = /\/\*START COMMANDS ZONE GENERATED BY G4GEN\*\//.exec(head)
    const gen_end = /\/\*END COMMANDS ZONE GENERATED BY G4GEN\*\//.exec(head)

    if (gen_start && gen_end) {
        const open = head.substring(0, gen_start.index + gen_start[0].length)
        const close = head.substring(gen_end.index, head.length)
        const commands = `${open}\n${CommandsLexer}${close}`
        const i_start = /\/\*START I_COMMANDS ZONE GENERATED BY G4GEN\*\//.exec(commands)
        const i_end = /\/\*END I_COMMANDS ZONE GENERATED BY G4GEN\*\//.exec(commands)

        if (i_start && gen_end) {
            const open = commands.substring(0, i_start.index + i_start[0].length)
            const close = commands.substring(i_end.index, commands.length)
            const data = `${open}\n${I_CommandsLexer}${close}`
    
            fs.writeFileSync('./src/mcbLexer.g4', data)
        } else {
            console.log('error missing data 3')
        }

    } else {
        console.log('error missing data 2')
    }
} else {
    console.log('error missing data 1')
}

// fs.writeFileSync('CommandsLexer',CommandsLexer)


// let CommandsParser = ""

// CommandsParser += (
// `

// parser grammar CommandsParser;
// options { tokenVocab = CommandsLexer;}

// stack: NL* commands* EOF;

// commands
//     : COMMANDS CommandStr* COMMANDS_END
//     ;


// `
// )

// fs.writeFileSync('CommandsParser.g4',CommandsParser)